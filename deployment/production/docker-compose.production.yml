version: '3.8'

services:
  retro-peft-api:
    build: 
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Production configuration
      - RETRO_PEFT_LOG_LEVEL=INFO
      - RETRO_PEFT_SECURITY_ENABLE_VALIDATION=true
      - RETRO_PEFT_CACHE_SIZE=10000
      - RETRO_PEFT_CACHE_TTL=3600.0
      - RETRO_PEFT_CACHE_MEMORY_MB=500.0
      - RETRO_PEFT_EMBEDDING_DIM=768
      - RETRO_PEFT_CHUNK_SIZE=512
      - RETRO_PEFT_MAX_WORKERS=8
      - RETRO_PEFT_BATCH_SIZE=32
      - RETRO_PEFT_RATE_LIMIT=100
      - RETRO_PEFT_MIN_POOL_SIZE=4
      - RETRO_PEFT_MAX_POOL_SIZE=20
      - RETRO_PEFT_SCALE_UP_THRESHOLD=0.8
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - retro-peft-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/static:/usr/share/nginx/html:ro
    depends_on:
      - retro-peft-api
    restart: unless-stopped
    networks:
      - retro-peft-network

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - retro-peft-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - retro-peft-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=retropeft_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - retro-peft-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  retro-peft-network:
    driver: bridge