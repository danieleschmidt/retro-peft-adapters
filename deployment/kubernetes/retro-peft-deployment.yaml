apiVersion: v1
kind: Namespace
metadata:
  name: retro-peft
  labels:
    app: retro-peft-adapters
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: retro-peft-api
  namespace: retro-peft
  labels:
    app: retro-peft-api
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: retro-peft-api
  template:
    metadata:
      labels:
        app: retro-peft-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: retro-peft-service-account
      containers:
      - name: retro-peft-api
        image: retro-peft-adapters:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: RETRO_PEFT_ENV
          value: "production"
        - name: RETRO_PEFT_LOG_LEVEL
          value: "info"
        - name: RETRO_PEFT_CACHE_SIZE
          value: "10000"
        - name: RETRO_PEFT_MAX_WORKERS
          value: "4"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: QDRANT_URL
          value: "http://qdrant-service:6333"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: model-volume
          mountPath: /app/models
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: retro-peft-data-pvc
      - name: model-volume
        persistentVolumeClaim:
          claimName: retro-peft-models-pvc
      - name: config-volume
        configMap:
          name: retro-peft-config
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: retro-peft-api-service
  namespace: retro-peft
  labels:
    app: retro-peft-api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: retro-peft-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: retro-peft-ingress
  namespace: retro-peft
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.retro-peft.com
    secretName: retro-peft-tls
  rules:
  - host: api.retro-peft.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: retro-peft-api-service
            port:
              number: 8000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retro-peft-service-account
  namespace: retro-peft
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: retro-peft-config
  namespace: retro-peft
data:
  app.yaml: |
    server:
      host: "0.0.0.0"
      port: 8000
      workers: 4
    
    cache:
      type: "redis"
      url: "redis://redis-service:6379"
      max_size: 10000
      ttl: 3600
    
    retrieval:
      backend: "qdrant"
      url: "http://qdrant-service:6333"
      embedding_dim: 768
      chunk_size: 512
    
    logging:
      level: "info"
      format: "json"
      
    security:
      cors_origins: ["https://app.retro-peft.com"]
      max_request_size: 10485760  # 10MB
      rate_limit: 100
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: retro-peft-data-pvc
  namespace: retro-peft
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: retro-peft-models-pvc
  namespace: retro-peft
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: retro-peft-pdb
  namespace: retro-peft
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: retro-peft-api
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: retro-peft-hpa
  namespace: retro-peft
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: retro-peft-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60