[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "retro-peft-adapters"
version = "0.1.0"
description = "Retrieval-augmented parameter-efficient adapters combining frozen key/value caching with local vector databases"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"}
]
keywords = ["peft", "rag", "retrieval", "adapters", "llm", "fine-tuning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.12.0",
    "transformers>=4.21.0",
    "peft>=0.4.0",
    "datasets>=2.0.0",
    "accelerate>=0.20.0",
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "sentence-transformers>=2.2.0",
]

[project.optional-dependencies]
faiss = ["faiss-cpu>=1.7.0"]
faiss-gpu = ["faiss-gpu>=1.7.0"]
qdrant = ["qdrant-client>=1.3.0"]
weaviate = ["weaviate-client>=3.20.0"]
all-backends = [
    "faiss-cpu>=1.7.0",
    "qdrant-client>=1.3.0",
    "weaviate-client>=3.20.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "hypothesis>=6.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/retro-peft-adapters"
Documentation = "https://retro-peft-adapters.readthedocs.io"
Repository = "https://github.com/yourusername/retro-peft-adapters"
"Bug Tracker" = "https://github.com/yourusername/retro-peft-adapters/issues"
Changelog = "https://github.com/yourusername/retro-peft-adapters/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
known_first_party = ["retro_peft"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["src/retro_peft"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false